generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
  TEACHER
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  surname               String?
  email                 String?                @unique
  emailVerified         DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accunts               Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation twoFactorConfirmation?
  teacherId             String?
  teacher               Teacher?               @relation(fields: [teacherId], references: [id])
}

enum languagePick {
  English
  China
  Polish
  German
}

model Teacher {
  id                 String                @id @default(cuid())
  language           languagePick          @default(English)
  students           User[]
  repeating_interval Int?                  @default(0)
  availabilities     TeacherAvailability[]
}

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

model TeacherAvailability {
  id        String     @id @default(cuid())
  teacherId String
  teacher   Teacher    @relation(fields: [teacherId], references: [id])
  day       DayOfWeek // День недели (например, "Monday", "Tuesday" и т.д.)
  timeSlots TimeSlot[]
}

model TimeSlot {
  id                    String               @id @default(cuid())
  start                 String // Время начала слота (например, "09:00")
  end                   String // Время окончания слота (например, "10:00")
  status                TimeSlotStatus
  studentId             String? // Ссылка на идентификатор ученика, если слот занят
  TeacherAvailability   TeacherAvailability? @relation(fields: [teacherAvailabilityId], references: [id])
  teacherAvailabilityId String?
}

enum TimeSlotStatus {
  FREE
  OCCUPIED
  NON_WORKING
}

model Course {
  id          String @id @default(cuid())
  name        String
  description String
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model twoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model twoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
